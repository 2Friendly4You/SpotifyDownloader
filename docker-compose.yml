services:
  spotifydownloader-app:
    build: .
    container_name: spotifydownloader-app
    expose:
      - "5000"
    depends_on:
      - spotifydownloader-data
      - spotifydownloader-redis
    volumes_from:
      - spotifydownloader-data
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
      - MAX_PENDING_REQUESTS=5
    restart: unless-stopped

  spotifydownloader-nginx:
    image: nginx:alpine
    container_name: spotifydownloader-nginx
    ports:
      - "8900:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - spotifydownloader-app
      - spotifydownloader-data
    volumes_from:
      - spotifydownloader-data
    restart: unless-stopped

  spotifydownloader-data:
    image: alpine:latest
    container_name: spotifydownloader-data
    volumes:
      - ./music:/var/www/SpotifyDownloader:rw
      - ./images:/var/www/images
      - ./static:/var/www/static
      - ./searches.json:/app/searches.json
    command: tail -f /dev/null

  spotifydownloader-redis:
    image: redis:alpine
    container_name: spotifydownloader-redis
    restart: unless-stopped

  spotifydownloader-cleanup:
    build:
      context: .
      dockerfile: Dockerfile.cleanup
    container_name: spotifydownloader-cleanup
    volumes_from:
      - spotifydownloader-data
    environment:
      - RETENTION_DAYS=${CLEANUP_RETENTION_DAYS:-14} # Default to 14 days if not set
      - AGE_CLEANUP_INTERVAL=${AGE_CLEANUP_INTERVAL:-86400} # Default to 24 hours if not set (renamed from CLEANUP_INTERVAL)
      - MAX_MUSIC_DIR_SIZE_MB=${MAX_MUSIC_DIR_SIZE_MB:-0} # Default to 0 (no limit) if not set
      - CLEANUP_TARGET_PERCENTAGE=${CLEANUP_TARGET_PERCENTAGE:-90} # Default to 90% if not set
      - SIZE_CHECK_INTERVAL=${SIZE_CHECK_INTERVAL:-3600} # Default to 1 hour if not set
    restart: unless-stopped
